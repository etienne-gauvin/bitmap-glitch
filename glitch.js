// Generated by CoffeeScript 1.8.0
(function() {
  var Image, Pixel, backupfile, config, data, defaultValue, fconfig, filter, filters, floor, fname, fs, imagefile, img, key, n, path, pixel, rand, round, save_copy, save_copy_path, use_backup, x, y, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

  fs = require('fs');

  path = require('path');

  Image = require('./image');

  Pixel = require('./pixel');

  config = require('./config');

  filters = require('./filters');

  floor = Math.floor;

  round = Math.round;

  rand = function(a, b) {
    if (a == null) {
      a = 0;
    }
    if (b == null) {
      b = 1;
    }
    return Math.random() * b + a;
  };

  imagefile = config.imagefile;

  backupfile = config.backupfile;

  use_backup = config.use_backup;

  save_copy = config.save_copy;

  if (!fs.existsSync(imagefile) && !fs.existsSync(backupfile)) {
    console.log("No image '" + imagefile + "' or '" + backupfile + "' to use !");
    return;
  }

  if ((use_backup && fs.existsSync(backupfile)) || !fs.existsSync(imagefile)) {
    data = fs.readFileSync(backupfile);
    fs.writeFileSync(imagefile, data);
  } else {
    data = fs.readFileSync(imagefile);
  }

  if (!fs.existsSync(backupfile)) {
    fs.writeFileSync(backupfile, data);
  }

  img = new Image(imagefile);

  console.log("Processing...");

  _ref = config.filters;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    filter = _ref[_i];
    fname = filter.f;
    fconfig = {
      step_x: 1,
      step_y: 1
    };
    _ref1 = filters[fname];
    for (key in _ref1) {
      defaultValue = _ref1[key];
      fconfig[key] = (_ref2 = filter[key]) != null ? _ref2 : defaultValue;
    }
    console.log("Applying filter " + fname + " with config:\n", fconfig);
    for (y = _j = 0, _ref3 = img.height - 1, _ref4 = fconfig.step_y; _ref4 > 0 ? _j <= _ref3 : _j >= _ref3; y = _j += _ref4) {
      for (x = _k = 0, _ref5 = img.width - 1, _ref6 = fconfig.step_x; _ref6 > 0 ? _k <= _ref5 : _k >= _ref5; x = _k += _ref6) {
        pixel = new Pixel(img, x, y);
        filters[fname].func(pixel, fconfig);
      }
    }
  }

  img.save(imagefile);

  if (save_copy != null) {
    if (!fs.existsSync(save_copy)) {
      fs.mkdirSync(save_copy);
    }
    n = (new Date).getTime();
    save_copy_path = path.join(save_copy, "" + (path.basename(imagefile, '.bmp')) + "-" + n + ".bmp");
    img.save(save_copy_path);
  }

}).call(this);
